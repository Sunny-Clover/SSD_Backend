name: Build and deploy Python app to Azure Web App - SSDBackend

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # This is required for actions/checkout

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install dependencies
        run: |
          pip install -r backend/requirements.txt

      - name: Build Docker image
        run: |
          docker build -f backend/Dockerfile -t fastapi_app ./backend

      - name: Save Docker image as artifact
        run: |
          docker save fastapi_app > fastapi_app.tar
        # Save Docker image as tar file for later use in deployment

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: fastapi_app_image
          path: fastapi_app.tar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: fastapi_app_image

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_E93B4FB1FDD84D18A37865F21754D8CF }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_4FF0A3CAC74D4A21B1061D0AB790EF21 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_3C9888101D48473BA22E018692E33FF2 }}
      - name: Load Docker image from artifact
        run: |
          docker load < fastapi_app.tar

      - name: Deploy Docker image to Azure Web App
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'SSDBackend'
          slot-name: 'Production'
          images: 'fastapi_app'  # Use the image tag generated during build

      - name: Set environment variables in Azure
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV

# name: Docker Compose Build and Deploy to Azure

# on:
#   push:
#     branches:
#       - main  # 當推送到 main 分支時觸發這個工作流

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#     # 設置 git 配置
#     - name: Checkout code
#       uses: actions/checkout@v2

#     # 設置 Docker
#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v1

#     # 登入 Azure Container Registry (ACR)
#     - name: Login to Azure Container Registry
#       uses: azure/docker-login@v1
#       with:
#         login-server: ${{ secrets.AZURE_ACR_LOGIN_SERVER }}  # 你的 ACR login server URL，來自 secrets
#         username: ${{ secrets.AZURE_ACR_USERNAME }}  # 來自 Azure Service Principal 的 username
#         password: ${{ secrets.AZURE_ACR_PASSWORD }}  # 來自 Azure Service Principal 的 password

#     # 設置 Docker Compose
#     - name: Set up Docker Compose
#       run: |
#         docker-compose -f docker-compose.deploy.yml build api

#     # 推送 Docker 映像到 ACR
#     - name: Push Docker images to ACR
#       run: |
#         docker-compose -f docker-compose.deploy.yml push api

#     # 這一步可選：通知或發送成功消息
#     - name: Notify success
#       run: echo "Docker images successfully pushed to ACR!"
